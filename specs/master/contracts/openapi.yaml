openapi: 3.0.3
info:
  title: DB Handler Server API
  description: Unified API gateway for database services
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.example.com/v1
    description: Production server

security:
  - ApiKeyAuth: []

paths:
  /health:
    get:
      summary: Get system health status
      tags:
        - Health
      security: []
      responses:
        '200':
          description: System health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /services:
    get:
      summary: List all registered services
      tags:
        - Services
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, degraded]
        - name: type
          in: query
          schema:
            type: string
            enum: [db_service, etc_meisai]
      responses:
        '200':
          description: List of services
          content:
            application/json:
              schema:
                type: object
                properties:
                  services:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceRegistry'

    post:
      summary: Register a new service
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRegistration'
      responses:
        '201':
          description: Service registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceRegistry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /services/{serviceId}:
    get:
      summary: Get service details
      tags:
        - Services
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '200':
          description: Service details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceRegistry'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update service configuration
      tags:
        - Services
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceUpdate'
      responses:
        '200':
          description: Service updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceRegistry'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Unregister a service
      tags:
        - Services
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '204':
          description: Service unregistered
        '404':
          $ref: '#/components/responses/NotFound'

  /services/{serviceId}/health:
    get:
      summary: Get service health status
      tags:
        - Services
        - Health
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '200':
          description: Service health
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceHealth'
        '404':
          $ref: '#/components/responses/NotFound'

  /data:
    post:
      summary: Execute database operation
      tags:
        - Database Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DBRequest'
      responses:
        '200':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DBResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    get:
      summary: Query data
      tags:
        - Database Operations
      parameters:
        - name: service
          in: query
          required: true
          schema:
            type: string
            enum: [db_service, etc_meisai]
        - name: resource
          in: query
          required: true
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
            description: JSON encoded filter object
        - name: sort
          in: query
          schema:
            type: string
            description: Comma-separated sort fields
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Query results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DBResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /data/{id}:
    get:
      summary: Get specific record
      tags:
        - Database Operations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: service
          in: query
          required: true
          schema:
            type: string
            enum: [db_service, etc_meisai]
        - name: resource
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Record found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DBResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update record
      tags:
        - Database Operations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DBRequest'
      responses:
        '200':
          description: Record updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DBResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete record
      tags:
        - Database Operations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: service
          in: query
          required: true
          schema:
            type: string
            enum: [db_service, etc_meisai]
        - name: resource
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Record deleted
        '404':
          $ref: '#/components/responses/NotFound'

  /batch:
    post:
      summary: Execute batch operations
      tags:
        - Batch Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchRequest'
      responses:
        '200':
          description: Batch executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '413':
          description: Batch too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cache/stats:
    get:
      summary: Get cache statistics
      tags:
        - Cache
      responses:
        '200':
          description: Cache statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheStats'

  /cache/clear:
    post:
      summary: Clear cache
      tags:
        - Cache
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                service:
                  type: string
                  enum: [db_service, etc_meisai]
                resource:
                  type: string
      responses:
        '204':
          description: Cache cleared

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  parameters:
    ServiceId:
      name: serviceId
      in: path
      required: true
      schema:
        type: string
        format: uuid

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    ServiceRegistry:
      type: object
      required:
        - id
        - name
        - type
        - base_url
        - health_url
        - status
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 3
          maxLength: 100
        type:
          type: string
          enum: [db_service, etc_meisai]
        base_url:
          type: string
          format: uri
        health_url:
          type: string
          format: uri
        status:
          type: string
          enum: [active, inactive, degraded]
        max_connections:
          type: integer
          minimum: 1
          maximum: 1000
          default: 10
        timeout_ms:
          type: integer
          minimum: 100
          maximum: 30000
          default: 5000
        priority:
          type: integer
          minimum: 0
          maximum: 100
          default: 50
        metadata:
          type: object
          additionalProperties:
            type: string
        registered_at:
          type: string
          format: date-time
        last_health_check:
          type: string
          format: date-time

    ServiceRegistration:
      type: object
      required:
        - name
        - type
        - base_url
        - health_url
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
        type:
          type: string
          enum: [db_service, etc_meisai]
        base_url:
          type: string
          format: uri
        health_url:
          type: string
          format: uri
        api_key:
          type: string
        max_connections:
          type: integer
          minimum: 1
          maximum: 1000
        timeout_ms:
          type: integer
          minimum: 100
          maximum: 30000
        priority:
          type: integer
          minimum: 0
          maximum: 100
        metadata:
          type: object
          additionalProperties:
            type: string

    ServiceUpdate:
      type: object
      properties:
        base_url:
          type: string
          format: uri
        health_url:
          type: string
          format: uri
        max_connections:
          type: integer
          minimum: 1
          maximum: 1000
        timeout_ms:
          type: integer
          minimum: 100
          maximum: 30000
        priority:
          type: integer
          minimum: 0
          maximum: 100
        metadata:
          type: object
          additionalProperties:
            type: string

    DBRequest:
      type: object
      required:
        - id
        - service
        - operation
        - resource
        - client_id
      properties:
        id:
          type: string
          format: uuid
        service:
          type: string
          enum: [db_service, etc_meisai]
        operation:
          type: string
          enum: [CREATE, READ, UPDATE, DELETE, QUERY, BATCH]
        resource:
          type: string
        data:
          type: object
        query:
          $ref: '#/components/schemas/QueryParams'
        headers:
          type: object
          additionalProperties:
            type: string
        timeout_ms:
          type: integer
        trace_id:
          type: string
        client_id:
          type: string
        timestamp:
          type: string
          format: date-time

    QueryParams:
      type: object
      properties:
        filters:
          type: object
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortParam'
        limit:
          type: integer
          minimum: 1
          maximum: 1000
        offset:
          type: integer
          minimum: 0
        fields:
          type: array
          items:
            type: string

    SortParam:
      type: object
      required:
        - field
        - order
      properties:
        field:
          type: string
        order:
          type: string
          enum: [ASC, DESC]

    DBResponse:
      type: object
      required:
        - id
        - request_id
        - status
        - code
        - metadata
        - timestamp
      properties:
        id:
          type: string
          format: uuid
        request_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [success, error, partial]
        code:
          type: integer
        data:
          type: object
        error:
          $ref: '#/components/schemas/ErrorDetails'
        metadata:
          $ref: '#/components/schemas/ResponseMetadata'
        timestamp:
          type: string
          format: date-time

    ResponseMetadata:
      type: object
      properties:
        service:
          type: string
        duration_ms:
          type: number
        cache_hit:
          type: boolean
        retry_count:
          type: integer
        circuit_state:
          type: string

    BatchRequest:
      type: object
      required:
        - id
        - operations
        - strategy
        - client_id
      properties:
        id:
          type: string
          format: uuid
        operations:
          type: array
          minItems: 1
          maxItems: 100
          items:
            $ref: '#/components/schemas/DBRequest'
        strategy:
          type: string
          enum: [all, best_effort, sequential]
        client_id:
          type: string
        timestamp:
          type: string
          format: date-time

    BatchResponse:
      type: object
      required:
        - id
        - request_id
        - results
        - summary
        - timestamp
      properties:
        id:
          type: string
          format: uuid
        request_id:
          type: string
          format: uuid
        results:
          type: array
          items:
            $ref: '#/components/schemas/DBResponse'
        summary:
          $ref: '#/components/schemas/BatchSummary'
        timestamp:
          type: string
          format: date-time

    BatchSummary:
      type: object
      properties:
        total:
          type: integer
        succeeded:
          type: integer
        failed:
          type: integer
        duration_ms:
          type: number

    HealthStatus:
      type: object
      required:
        - status
        - version
        - uptime_seconds
        - services
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        version:
          type: string
        uptime_seconds:
          type: number
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceHealth'
        timestamp:
          type: string
          format: date-time

    ServiceHealth:
      type: object
      required:
        - service_id
        - service_name
        - status
      properties:
        service_id:
          type: string
          format: uuid
        service_name:
          type: string
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        response_time_ms:
          type: number
        last_check:
          type: string
          format: date-time
        error_count_last_hour:
          type: integer
        metadata:
          type: object
          additionalProperties:
            type: string

    CacheStats:
      type: object
      properties:
        total_entries:
          type: integer
        hit_rate:
          type: number
        miss_rate:
          type: number
        avg_ttl_seconds:
          type: number
        memory_usage_bytes:
          type: integer

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/ErrorDetails'

    ErrorDetails:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties:
            type: string
        retry_after_seconds:
          type: integer