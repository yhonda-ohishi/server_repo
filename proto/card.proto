syntax = "proto3";

package card.v1;

option go_package = "github.com/yhonda-ohishi/db-handler-server/proto/card/v1;cardv1";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// ETCCard represents an electronic toll collection card
message ETCCard {
  string id = 1;
  string user_id = 2;
  string card_number = 3;
  google.protobuf.Timestamp expiry_date = 4;
  CardStatus status = 5;
  string vehicle_number = 6;
  VehicleType vehicle_type = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp activated_at = 9;
  google.protobuf.Timestamp deactivated_at = 10;
}

enum CardStatus {
  CARD_STATUS_UNSPECIFIED = 0;
  CARD_STATUS_ACTIVE = 1;
  CARD_STATUS_SUSPENDED = 2;
  CARD_STATUS_EXPIRED = 3;
}

enum VehicleType {
  VEHICLE_TYPE_UNSPECIFIED = 0;
  VEHICLE_TYPE_REGULAR = 1;
  VEHICLE_TYPE_KEI = 2;
  VEHICLE_TYPE_LARGE = 3;
}

// Request messages
message GetCardRequest {
  string id = 1;
}

message CreateCardRequest {
  string user_id = 1;
  string card_number = 2;
  google.protobuf.Timestamp expiry_date = 3;
  string vehicle_number = 4;
  VehicleType vehicle_type = 5;
}

message UpdateCardRequest {
  string id = 1;
  string vehicle_number = 2;
  VehicleType vehicle_type = 3;
  CardStatus status = 4;
}

message DeleteCardRequest {
  string id = 1;
}

message ListCardsRequest {
  string user_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListCardsResponse {
  repeated ETCCard cards = 1;
  string next_page_token = 2;
}

// CardService provides card management operations
service CardService {
  // Get a card by ID
  rpc GetCard(GetCardRequest) returns (ETCCard) {
    option (google.api.http) = {
      get: "/api/v1/cards/{id}"
    };
  }

  // Create a new card
  rpc CreateCard(CreateCardRequest) returns (ETCCard) {
    option (google.api.http) = {
      post: "/api/v1/cards"
      body: "*"
    };
  }

  // Update an existing card
  rpc UpdateCard(UpdateCardRequest) returns (ETCCard) {
    option (google.api.http) = {
      put: "/api/v1/cards/{id}"
      body: "*"
    };
  }

  // Delete a card
  rpc DeleteCard(DeleteCardRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/cards/{id}"
    };
  }

  // List cards for a user
  rpc ListCards(ListCardsRequest) returns (ListCardsResponse) {
    option (google.api.http) = {
      get: "/api/v1/cards"
    };
  }
}