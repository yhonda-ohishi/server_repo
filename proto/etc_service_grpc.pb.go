// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: etc_service.proto

package etc_meisaiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ETCService_CreateETCMeisai_FullMethodName         = "/etc_meisai.v1.ETCService/CreateETCMeisai"
	ETCService_GetETCMeisai_FullMethodName            = "/etc_meisai.v1.ETCService/GetETCMeisai"
	ETCService_UpdateETCMeisai_FullMethodName         = "/etc_meisai.v1.ETCService/UpdateETCMeisai"
	ETCService_DeleteETCMeisai_FullMethodName         = "/etc_meisai.v1.ETCService/DeleteETCMeisai"
	ETCService_ListETCMeisai_FullMethodName           = "/etc_meisai.v1.ETCService/ListETCMeisai"
	ETCService_BulkCreateETCMeisai_FullMethodName     = "/etc_meisai.v1.ETCService/BulkCreateETCMeisai"
	ETCService_BulkUpdateETCMeisai_FullMethodName     = "/etc_meisai.v1.ETCService/BulkUpdateETCMeisai"
	ETCService_GetETCMeisaiByDateRange_FullMethodName = "/etc_meisai.v1.ETCService/GetETCMeisaiByDateRange"
	ETCService_GetETCMeisaiByHash_FullMethodName      = "/etc_meisai.v1.ETCService/GetETCMeisaiByHash"
	ETCService_GetUnmappedETCMeisai_FullMethodName    = "/etc_meisai.v1.ETCService/GetUnmappedETCMeisai"
	ETCService_CheckDuplicatesByHash_FullMethodName   = "/etc_meisai.v1.ETCService/CheckDuplicatesByHash"
	ETCService_GenerateHash_FullMethodName            = "/etc_meisai.v1.ETCService/GenerateHash"
	ETCService_GetETCSummary_FullMethodName           = "/etc_meisai.v1.ETCService/GetETCSummary"
	ETCService_GetMonthlyStats_FullMethodName         = "/etc_meisai.v1.ETCService/GetMonthlyStats"
)

// ETCServiceClient is the client API for ETCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ETC明細 gRPC service definition
type ETCServiceClient interface {
	// Basic CRUD operations
	CreateETCMeisai(ctx context.Context, in *CreateETCMeisaiRequest, opts ...grpc.CallOption) (*ETCMeisaiResponse, error)
	GetETCMeisai(ctx context.Context, in *GetETCMeisaiRequest, opts ...grpc.CallOption) (*ETCMeisaiResponse, error)
	UpdateETCMeisai(ctx context.Context, in *UpdateETCMeisaiRequest, opts ...grpc.CallOption) (*ETCMeisaiResponse, error)
	DeleteETCMeisai(ctx context.Context, in *DeleteETCMeisaiRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListETCMeisai(ctx context.Context, in *ListETCMeisaiRequest, opts ...grpc.CallOption) (*ListETCMeisaiResponse, error)
	// Bulk operations
	BulkCreateETCMeisai(ctx context.Context, in *BulkCreateETCMeisaiRequest, opts ...grpc.CallOption) (*BulkCreateETCMeisaiResponse, error)
	BulkUpdateETCMeisai(ctx context.Context, in *BulkUpdateETCMeisaiRequest, opts ...grpc.CallOption) (*BulkUpdateETCMeisaiResponse, error)
	// Advanced query operations
	GetETCMeisaiByDateRange(ctx context.Context, in *GetETCMeisaiByDateRangeRequest, opts ...grpc.CallOption) (*ListETCMeisaiResponse, error)
	GetETCMeisaiByHash(ctx context.Context, in *GetETCMeisaiByHashRequest, opts ...grpc.CallOption) (*ETCMeisaiResponse, error)
	GetUnmappedETCMeisai(ctx context.Context, in *GetUnmappedETCMeisaiRequest, opts ...grpc.CallOption) (*ListETCMeisaiResponse, error)
	// Utility operations
	CheckDuplicatesByHash(ctx context.Context, in *CheckDuplicatesByHashRequest, opts ...grpc.CallOption) (*CheckDuplicatesResponse, error)
	GenerateHash(ctx context.Context, in *GenerateHashRequest, opts ...grpc.CallOption) (*GenerateHashResponse, error)
	// Summary and statistics
	GetETCSummary(ctx context.Context, in *GetETCSummaryRequest, opts ...grpc.CallOption) (*GetETCSummaryResponse, error)
	GetMonthlyStats(ctx context.Context, in *GetMonthlyStatsRequest, opts ...grpc.CallOption) (*GetMonthlyStatsResponse, error)
}

type eTCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewETCServiceClient(cc grpc.ClientConnInterface) ETCServiceClient {
	return &eTCServiceClient{cc}
}

func (c *eTCServiceClient) CreateETCMeisai(ctx context.Context, in *CreateETCMeisaiRequest, opts ...grpc.CallOption) (*ETCMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ETCMeisaiResponse)
	err := c.cc.Invoke(ctx, ETCService_CreateETCMeisai_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCServiceClient) GetETCMeisai(ctx context.Context, in *GetETCMeisaiRequest, opts ...grpc.CallOption) (*ETCMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ETCMeisaiResponse)
	err := c.cc.Invoke(ctx, ETCService_GetETCMeisai_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCServiceClient) UpdateETCMeisai(ctx context.Context, in *UpdateETCMeisaiRequest, opts ...grpc.CallOption) (*ETCMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ETCMeisaiResponse)
	err := c.cc.Invoke(ctx, ETCService_UpdateETCMeisai_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCServiceClient) DeleteETCMeisai(ctx context.Context, in *DeleteETCMeisaiRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ETCService_DeleteETCMeisai_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCServiceClient) ListETCMeisai(ctx context.Context, in *ListETCMeisaiRequest, opts ...grpc.CallOption) (*ListETCMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListETCMeisaiResponse)
	err := c.cc.Invoke(ctx, ETCService_ListETCMeisai_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCServiceClient) BulkCreateETCMeisai(ctx context.Context, in *BulkCreateETCMeisaiRequest, opts ...grpc.CallOption) (*BulkCreateETCMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkCreateETCMeisaiResponse)
	err := c.cc.Invoke(ctx, ETCService_BulkCreateETCMeisai_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCServiceClient) BulkUpdateETCMeisai(ctx context.Context, in *BulkUpdateETCMeisaiRequest, opts ...grpc.CallOption) (*BulkUpdateETCMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkUpdateETCMeisaiResponse)
	err := c.cc.Invoke(ctx, ETCService_BulkUpdateETCMeisai_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCServiceClient) GetETCMeisaiByDateRange(ctx context.Context, in *GetETCMeisaiByDateRangeRequest, opts ...grpc.CallOption) (*ListETCMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListETCMeisaiResponse)
	err := c.cc.Invoke(ctx, ETCService_GetETCMeisaiByDateRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCServiceClient) GetETCMeisaiByHash(ctx context.Context, in *GetETCMeisaiByHashRequest, opts ...grpc.CallOption) (*ETCMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ETCMeisaiResponse)
	err := c.cc.Invoke(ctx, ETCService_GetETCMeisaiByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCServiceClient) GetUnmappedETCMeisai(ctx context.Context, in *GetUnmappedETCMeisaiRequest, opts ...grpc.CallOption) (*ListETCMeisaiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListETCMeisaiResponse)
	err := c.cc.Invoke(ctx, ETCService_GetUnmappedETCMeisai_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCServiceClient) CheckDuplicatesByHash(ctx context.Context, in *CheckDuplicatesByHashRequest, opts ...grpc.CallOption) (*CheckDuplicatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckDuplicatesResponse)
	err := c.cc.Invoke(ctx, ETCService_CheckDuplicatesByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCServiceClient) GenerateHash(ctx context.Context, in *GenerateHashRequest, opts ...grpc.CallOption) (*GenerateHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateHashResponse)
	err := c.cc.Invoke(ctx, ETCService_GenerateHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCServiceClient) GetETCSummary(ctx context.Context, in *GetETCSummaryRequest, opts ...grpc.CallOption) (*GetETCSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetETCSummaryResponse)
	err := c.cc.Invoke(ctx, ETCService_GetETCSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCServiceClient) GetMonthlyStats(ctx context.Context, in *GetMonthlyStatsRequest, opts ...grpc.CallOption) (*GetMonthlyStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMonthlyStatsResponse)
	err := c.cc.Invoke(ctx, ETCService_GetMonthlyStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ETCServiceServer is the server API for ETCService service.
// All implementations must embed UnimplementedETCServiceServer
// for forward compatibility.
//
// ETC明細 gRPC service definition
type ETCServiceServer interface {
	// Basic CRUD operations
	CreateETCMeisai(context.Context, *CreateETCMeisaiRequest) (*ETCMeisaiResponse, error)
	GetETCMeisai(context.Context, *GetETCMeisaiRequest) (*ETCMeisaiResponse, error)
	UpdateETCMeisai(context.Context, *UpdateETCMeisaiRequest) (*ETCMeisaiResponse, error)
	DeleteETCMeisai(context.Context, *DeleteETCMeisaiRequest) (*emptypb.Empty, error)
	ListETCMeisai(context.Context, *ListETCMeisaiRequest) (*ListETCMeisaiResponse, error)
	// Bulk operations
	BulkCreateETCMeisai(context.Context, *BulkCreateETCMeisaiRequest) (*BulkCreateETCMeisaiResponse, error)
	BulkUpdateETCMeisai(context.Context, *BulkUpdateETCMeisaiRequest) (*BulkUpdateETCMeisaiResponse, error)
	// Advanced query operations
	GetETCMeisaiByDateRange(context.Context, *GetETCMeisaiByDateRangeRequest) (*ListETCMeisaiResponse, error)
	GetETCMeisaiByHash(context.Context, *GetETCMeisaiByHashRequest) (*ETCMeisaiResponse, error)
	GetUnmappedETCMeisai(context.Context, *GetUnmappedETCMeisaiRequest) (*ListETCMeisaiResponse, error)
	// Utility operations
	CheckDuplicatesByHash(context.Context, *CheckDuplicatesByHashRequest) (*CheckDuplicatesResponse, error)
	GenerateHash(context.Context, *GenerateHashRequest) (*GenerateHashResponse, error)
	// Summary and statistics
	GetETCSummary(context.Context, *GetETCSummaryRequest) (*GetETCSummaryResponse, error)
	GetMonthlyStats(context.Context, *GetMonthlyStatsRequest) (*GetMonthlyStatsResponse, error)
	mustEmbedUnimplementedETCServiceServer()
}

// UnimplementedETCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedETCServiceServer struct{}

func (UnimplementedETCServiceServer) CreateETCMeisai(context.Context, *CreateETCMeisaiRequest) (*ETCMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateETCMeisai not implemented")
}
func (UnimplementedETCServiceServer) GetETCMeisai(context.Context, *GetETCMeisaiRequest) (*ETCMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetETCMeisai not implemented")
}
func (UnimplementedETCServiceServer) UpdateETCMeisai(context.Context, *UpdateETCMeisaiRequest) (*ETCMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateETCMeisai not implemented")
}
func (UnimplementedETCServiceServer) DeleteETCMeisai(context.Context, *DeleteETCMeisaiRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteETCMeisai not implemented")
}
func (UnimplementedETCServiceServer) ListETCMeisai(context.Context, *ListETCMeisaiRequest) (*ListETCMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListETCMeisai not implemented")
}
func (UnimplementedETCServiceServer) BulkCreateETCMeisai(context.Context, *BulkCreateETCMeisaiRequest) (*BulkCreateETCMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreateETCMeisai not implemented")
}
func (UnimplementedETCServiceServer) BulkUpdateETCMeisai(context.Context, *BulkUpdateETCMeisaiRequest) (*BulkUpdateETCMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdateETCMeisai not implemented")
}
func (UnimplementedETCServiceServer) GetETCMeisaiByDateRange(context.Context, *GetETCMeisaiByDateRangeRequest) (*ListETCMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetETCMeisaiByDateRange not implemented")
}
func (UnimplementedETCServiceServer) GetETCMeisaiByHash(context.Context, *GetETCMeisaiByHashRequest) (*ETCMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetETCMeisaiByHash not implemented")
}
func (UnimplementedETCServiceServer) GetUnmappedETCMeisai(context.Context, *GetUnmappedETCMeisaiRequest) (*ListETCMeisaiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnmappedETCMeisai not implemented")
}
func (UnimplementedETCServiceServer) CheckDuplicatesByHash(context.Context, *CheckDuplicatesByHashRequest) (*CheckDuplicatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDuplicatesByHash not implemented")
}
func (UnimplementedETCServiceServer) GenerateHash(context.Context, *GenerateHashRequest) (*GenerateHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateHash not implemented")
}
func (UnimplementedETCServiceServer) GetETCSummary(context.Context, *GetETCSummaryRequest) (*GetETCSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetETCSummary not implemented")
}
func (UnimplementedETCServiceServer) GetMonthlyStats(context.Context, *GetMonthlyStatsRequest) (*GetMonthlyStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyStats not implemented")
}
func (UnimplementedETCServiceServer) mustEmbedUnimplementedETCServiceServer() {}
func (UnimplementedETCServiceServer) testEmbeddedByValue()                    {}

// UnsafeETCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ETCServiceServer will
// result in compilation errors.
type UnsafeETCServiceServer interface {
	mustEmbedUnimplementedETCServiceServer()
}

func RegisterETCServiceServer(s grpc.ServiceRegistrar, srv ETCServiceServer) {
	// If the following call pancis, it indicates UnimplementedETCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ETCService_ServiceDesc, srv)
}

func _ETCService_CreateETCMeisai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateETCMeisaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCServiceServer).CreateETCMeisai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCService_CreateETCMeisai_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCServiceServer).CreateETCMeisai(ctx, req.(*CreateETCMeisaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCService_GetETCMeisai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetETCMeisaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCServiceServer).GetETCMeisai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCService_GetETCMeisai_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCServiceServer).GetETCMeisai(ctx, req.(*GetETCMeisaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCService_UpdateETCMeisai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateETCMeisaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCServiceServer).UpdateETCMeisai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCService_UpdateETCMeisai_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCServiceServer).UpdateETCMeisai(ctx, req.(*UpdateETCMeisaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCService_DeleteETCMeisai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteETCMeisaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCServiceServer).DeleteETCMeisai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCService_DeleteETCMeisai_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCServiceServer).DeleteETCMeisai(ctx, req.(*DeleteETCMeisaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCService_ListETCMeisai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListETCMeisaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCServiceServer).ListETCMeisai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCService_ListETCMeisai_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCServiceServer).ListETCMeisai(ctx, req.(*ListETCMeisaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCService_BulkCreateETCMeisai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCreateETCMeisaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCServiceServer).BulkCreateETCMeisai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCService_BulkCreateETCMeisai_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCServiceServer).BulkCreateETCMeisai(ctx, req.(*BulkCreateETCMeisaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCService_BulkUpdateETCMeisai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateETCMeisaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCServiceServer).BulkUpdateETCMeisai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCService_BulkUpdateETCMeisai_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCServiceServer).BulkUpdateETCMeisai(ctx, req.(*BulkUpdateETCMeisaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCService_GetETCMeisaiByDateRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetETCMeisaiByDateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCServiceServer).GetETCMeisaiByDateRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCService_GetETCMeisaiByDateRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCServiceServer).GetETCMeisaiByDateRange(ctx, req.(*GetETCMeisaiByDateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCService_GetETCMeisaiByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetETCMeisaiByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCServiceServer).GetETCMeisaiByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCService_GetETCMeisaiByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCServiceServer).GetETCMeisaiByHash(ctx, req.(*GetETCMeisaiByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCService_GetUnmappedETCMeisai_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnmappedETCMeisaiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCServiceServer).GetUnmappedETCMeisai(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCService_GetUnmappedETCMeisai_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCServiceServer).GetUnmappedETCMeisai(ctx, req.(*GetUnmappedETCMeisaiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCService_CheckDuplicatesByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDuplicatesByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCServiceServer).CheckDuplicatesByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCService_CheckDuplicatesByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCServiceServer).CheckDuplicatesByHash(ctx, req.(*CheckDuplicatesByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCService_GenerateHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCServiceServer).GenerateHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCService_GenerateHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCServiceServer).GenerateHash(ctx, req.(*GenerateHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCService_GetETCSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetETCSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCServiceServer).GetETCSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCService_GetETCSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCServiceServer).GetETCSummary(ctx, req.(*GetETCSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCService_GetMonthlyStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCServiceServer).GetMonthlyStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCService_GetMonthlyStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCServiceServer).GetMonthlyStats(ctx, req.(*GetMonthlyStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ETCService_ServiceDesc is the grpc.ServiceDesc for ETCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ETCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "etc_meisai.v1.ETCService",
	HandlerType: (*ETCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateETCMeisai",
			Handler:    _ETCService_CreateETCMeisai_Handler,
		},
		{
			MethodName: "GetETCMeisai",
			Handler:    _ETCService_GetETCMeisai_Handler,
		},
		{
			MethodName: "UpdateETCMeisai",
			Handler:    _ETCService_UpdateETCMeisai_Handler,
		},
		{
			MethodName: "DeleteETCMeisai",
			Handler:    _ETCService_DeleteETCMeisai_Handler,
		},
		{
			MethodName: "ListETCMeisai",
			Handler:    _ETCService_ListETCMeisai_Handler,
		},
		{
			MethodName: "BulkCreateETCMeisai",
			Handler:    _ETCService_BulkCreateETCMeisai_Handler,
		},
		{
			MethodName: "BulkUpdateETCMeisai",
			Handler:    _ETCService_BulkUpdateETCMeisai_Handler,
		},
		{
			MethodName: "GetETCMeisaiByDateRange",
			Handler:    _ETCService_GetETCMeisaiByDateRange_Handler,
		},
		{
			MethodName: "GetETCMeisaiByHash",
			Handler:    _ETCService_GetETCMeisaiByHash_Handler,
		},
		{
			MethodName: "GetUnmappedETCMeisai",
			Handler:    _ETCService_GetUnmappedETCMeisai_Handler,
		},
		{
			MethodName: "CheckDuplicatesByHash",
			Handler:    _ETCService_CheckDuplicatesByHash_Handler,
		},
		{
			MethodName: "GenerateHash",
			Handler:    _ETCService_GenerateHash_Handler,
		},
		{
			MethodName: "GetETCSummary",
			Handler:    _ETCService_GetETCSummary_Handler,
		},
		{
			MethodName: "GetMonthlyStats",
			Handler:    _ETCService_GetMonthlyStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "etc_service.proto",
}
